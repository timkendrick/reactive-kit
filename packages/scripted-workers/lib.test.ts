import { expect, test } from 'vitest';

import * as lib from './lib';

test('module exports', () => {
  expect({ ...lib }).toEqual({
    ACTION_TYPE_DELAY: lib.ACTION_TYPE_DELAY,
    ACTION_TYPE_KILL: lib.ACTION_TYPE_KILL,
    ACTION_TYPE_MODIFY_STATE: lib.ACTION_TYPE_MODIFY_STATE,
    ACTION_TYPE_NOOP: lib.ACTION_TYPE_NOOP,
    ACTION_TYPE_SEND: lib.ACTION_TYPE_SEND,
    ACTION_TYPE_SEQUENCE: lib.ACTION_TYPE_SEQUENCE,
    ACTION_TYPE_SPAWN: lib.ACTION_TYPE_SPAWN,
    ACTION_TYPE_WAIT_FOR: lib.ACTION_TYPE_WAIT_FOR,
    ACTION_TYPE_WHEN: lib.ACTION_TYPE_WHEN,
    ACTION_TYPE_WHEN_STATE: lib.ACTION_TYPE_WHEN_STATE,
    ACTION_TYPE_WHILE_LOOP: lib.ACTION_TYPE_WHILE_LOOP,
    ACTION_TYPE_WITH_STATE: lib.ACTION_TYPE_WITH_STATE,
    ACTOR_TYPE_SCRIPTED_ACTOR: lib.ACTOR_TYPE_SCRIPTED_ACTOR,
    COMPUTE_STATE_VALUE_RESOLVER_TYPE: lib.COMPUTE_STATE_VALUE_RESOLVER_TYPE,
    READ_STATE_VALUE_RESOLVER_TYPE: lib.READ_STATE_VALUE_RESOLVER_TYPE,
    SPAWNED_ACTOR_VALUE_RESOLVER_TYPE: lib.SPAWNED_ACTOR_VALUE_RESOLVER_TYPE,
    STATE_HANDLE_VALUE_RESOLVER_TYPE: lib.STATE_HANDLE_VALUE_RESOLVER_TYPE,
    VALUE_RESOLVER_TYPE: lib.VALUE_RESOLVER_TYPE,
    act: lib.act,
    computeState: lib.computeState,
    createAction: lib.createAction,
    createComputeStateValueResolver: lib.createComputeStateValueResolver,
    createReadStateValueResolver: lib.createReadStateValueResolver,
    createSpawnedActorValueResolver: lib.createSpawnedActorValueResolver,
    createStateRef: lib.createStateRef,
    delay: lib.delay,
    isComputeStateValueResolver: lib.isComputeStateValueResolver,
    isReadStateValueResolver: lib.isReadStateValueResolver,
    isSpawnedActorValueResolver: lib.isSpawnedActorValueResolver,
    isStateRefValueResolver: lib.isStateRefValueResolver,
    isValueResolver: lib.isValueResolver,
    kill: lib.kill,
    modifyState: lib.modifyState,
    noop: lib.noop,
    readState: lib.readState,
    send: lib.send,
    sequence: lib.sequence,
    spawn: lib.spawn,
    waitFor: lib.waitFor,
    when: lib.when,
    whenState: lib.whenState,
    whileLoop: lib.whileLoop,
    withState: lib.withState,
  });
});
